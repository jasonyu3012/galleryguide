stages:
    - build
    - test
    - deploy

# I'm not entirely sure about this, but it might be necessary for dependencies
cache:
    paths:
        - frontend/node_modules/

build-frontend:
    image: node:latest
    stage: build
    rules:
        - if: $CI_COMMIT_BRANCH == "main"
    script:
        - cd frontend
        - npm install
        # not entirely sure why CI environment var should be set to false
        - CI=false npm run-script build
        - echo "built frontend"

dev-test-api:
    image: python:3.10
    stage: test
    rules:
        - if: $CI_COMMIT_BRANCH == "development"
    script:
        - cd backend
        - pip install --upgrade pip
        - pip install -r requirements.txt
        - export DATABASE_URL="sqlite://"
        - echo $DATABASE_URL
        - pytest


prod-test-api:
    image: postman/newman:alpine 
        entrypoint[""]
    stage: test
    rules:
        - if: $CI_COMMIT_BRANCH == "main"
    script:
        - newman run GalleryGuide.postman_collection.json
# TODO based on ArtDB
# test-postman:
#     stage: test
#     image:
#         # command line collection runner, defined in docker image
#         name: postman/newman:alpine
#         entrypoint: [""]
#     script:
        # TODO add script here when ready! the format will be like
        # newman run <file_name>.json

# script based on GEOJOBS
test-frontent-gui:
  stage: test
  image: python:3.10
  script:
  - cd frontend
  - pip install --upgrade pip
  - pip install --no-cache-dir -r ./testing/requirements.txt
  - apt-get update -q -y
  - apt-get --yes install libnss3
  - apt-get --yes install libgconf-2-4
  - apt-get install libx11-xcb1

  # from https://gitlab.com/10AMGroup11/bookrus/-/blob/main/.gitlab-ci.yml
  # Add chrome to container
  - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
  - sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
  - apt-get update -q -y 
  - apt-get install -y google-chrome-stable

  # Download and unzip the chromedriver
  - apt-get install -yqq unzip
  - wget -O /tmp/chromedriver.zip http://chromedriver.storage.googleapis.com/`curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE`/chromedriver_linux64.zip
  - unzip /tmp/chromedriver.zip chromedriver -d /usr/local/bin/

  # Run selenium tests
  - python3 gui_tests.py

# TODO 
# test-jest:
#     stage: test
#     image: node:latest
#     script:
#         - cd frontend
#         - npm install
#         # suppress output when running
#         - npm test --silent

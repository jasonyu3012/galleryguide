stages:
    - build
    - test
    - deploy

# I'm not entirely sure about this, but it might be necessary for dependencies
cache:
    paths:
        - frontend/node_modules/

build-frontend:
    image: node:latest
    stage: build
    rules:
        - if: $CI_COMMIT_BRANCH == "main"
    script:
        - cd frontend
        - npm install
        # not entirely sure why CI environment var should be set to false
        - CI=false npm run-script build
        - echo "built frontend"

dev-test-api:
    image: python:3.10
    stage: test
    rules:
        - if: $CI_COMMIT_BRANCH == "development"
    script:
        - cd backend
        - pip install --upgrade pip
        - pip install -r requirements.txt
        - export DATABASE_URL="sqlite://"
        - echo $DATABASE_URL
        - pytest


prod-test-api:
    image: postman/newman:alpine
    stage: test
    rules:
        - if: $CI_COMMIT_BRANCH == "main"
    script:
        - newman run GalleryGuide.postman_collection.json
# TODO based on ArtDB
# test-postman:
#     stage: test
#     image:
#         # command line collection runner, defined in docker image
#         name: postman/newman:alpine
#         entrypoint: [""]
#     script:
        # TODO add script here when ready! the format will be like
        # newman run <file_name>.json

# script based on IDB
test-selenium:
    stage: test
    image: python:3.9-slim
    services:
        - selenium/standalone-chrome
    before_script:
        - python3 -m pip install -r frontend/selenium/requirements.txt
    script:
        - cd frontend/selenium
        - python3 -m pytest


# TODO 
# test-jest:
#     stage: test
#     image: node:latest
#     script:
#         - cd frontend
#         - npm install
#         # suppress output when running
#         - npm test --silent
